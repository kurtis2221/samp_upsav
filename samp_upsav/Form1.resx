<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAgAQAAAAAAAAAAAAAAAEAAAAA
        AAAAAAAA////AHhYEACweAgA+Pj4AOjYsAD42LAA+OCwAPDYqADg2LgA6Ni4AODQsAD42LgAAMCAAAAA
        6AAAyIgAALCAAADImAAAyJAAkND4AJDY+AB4uOgA+MhYAPjIYADwyGAA0KhQAPDIWAD44LgAABjgAACo
        oAAIsIAACMiYAKDQ+ACY2PgAgMDoAOjQiADwyGgA+MhoANCwYADo2MAA+ODAAADAiAAAiKgACMCYABDI
        oAAQ0JgAcNDoAKDY+ACIwOAAqNj4ANiwYAD4yHAA6ODAAACgcAAAsHgACKiAAAi4gAAQsIgAKLigAJC4
        6ACIwOgAmMDQANiwWADQsFgA6ODIAPjgyAAAuIgAAADwAAigiAAQ0KAAeNjoAJDA4ACg4PgAsODwAABQ
        yAAAQLAAGNCgABjQqAB4uNgAqOD4ALjg6ADQsGgA6ODQAPjo0AAAwJAACKiIACi4mACw4PgAmMjgAPDQ
        gAAAWMgAGNiYACDYqAAYuJAAMNi4ALjo+ADg2KAA8OjYAPjo2AAAqHgACLCIAAAQyAAIaKgAGLiIABjA
        kABIwLAAoMDgAKDI4ACg0OgAuMCoANiwUAAIsKgACIi4ABjYoAAguJAAINiwAFjg0ADA4PgAwOj4AMDw
        +ADY4NAAEJC4ACDQqAAgwJAAKNiwACjgsACI4OgAqMjgAMjw+ADAyLAA8OjgAPjw4AAAuIAAAEDQAAhQ
        0ACQyNgAsNDoAODo0ADw8OAAAEDYABi4mAAw4LAAMOC4ADDIqADI6PgAsNDgAND4+ADo4KgA+MBYAPDw
        6AD48OgAIMiQACDAmAAowJgAKMCgACjIoABoyMAAsMjgALjQ4AC42OAAuNjoAPj46AAY4KgAAEC4ABCI
        yAA44LgAMMigADDouADY+PgA+PjwADDQqABomIgAiLCgACDgsAA46LgAeOjYANDw+ADY8PgACNCgACDI
        oACAqKAAsJigAGCgkACYoKAAcLigACjguAA46MAA0Oj4AEi4oABosKAAGNioABDAmAAw2LAAqJiYAFjI
        sACo6PAAsHgAAFiYiACYgIgAKKiIAAi4kAAYwJgAMLiYAFCwmAAo0KgAcNDIAMDY4ACIoKAAiIiIABjI
        oABA2LAAOPDAAGDw0ACYmJgAcKiYAJCAgACAsKgAMPDAAFjo0ABgkIgAMKiIABDYqAAY4LAAkJCQACjo
        uABQ6NAAsNDYAKh4EAB8WBAAtHwMALR4CAD8/PwA7NiwAPjcsAD84LAA/Ny0APzYtAD02KwA8NisAOjY
        tADk2LgA5NSwAPjcuAAAAOwAAMyMAADMlACQ1PwAkNj8AHi87AD8yFgA9MhkAPjIZADUrFQA9MhcAOjY
        vAD84LwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADj5eXm5ubm5ubm5ubm5ubm
        5ubm5ubm5ubm5eXkAAAAAOUBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAeUAAAAA5QEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEB5QAAAADmAQGr3A82ERGyssjdvt6tmdWn4bCRkqioAQHmAAAAAOYBAULV1h6y
        RUxcmHx9udLG2NPUsZ6oqKjnAeYAAAAA5gEBKRLP0LNFvlyYfbnStcvT09Sxn6ioqOcB5gAAAADmAQE1
        EBDFxty/aJiYysbLqqqqzZ6fn87OqQHmAAAAAOYB50ISH0K8tbhcycC1wtmP09PDsJ+oqKipAeYAAAAA
        5gHnQlQfZEWztLW2t7jgro+607CwnqioqKEB5gAAAADmAalCVB85RUXdqqusuY6uj7qvsLCeqKiolgHm
        AAAAAOYBqUISHzlFTL6to6SOjrqP2XaAsJ+oqDSWAeYAAAAA5gGhNRBkOTldaJeXmZubpqrNiJGRn6BQ
        PpYB5gAAAADmAZYpEh85RXFNi4x9jo6nj3aAgLCfqJMWlgHmAAAAAOYBg0JUHzlFcYuGl32NjeCHdnaA
        sKCJFxeVAeYAAAAA5gGDQlQfOUVxeXqYfX19fn92doCAgRcl+ooB5gAAAADmAYMpEh84b3BcXJh9fXR2
        a3Z3gIluJSX7igHmAAAAAOYBYjUQZDllZmhymJhpa2trbGyBPjIyMvxhAeYAAAAA5gFiKRIfOVpxXFxo
        pU9XX2xfYPslMjMz+2EB5gAAAADmAVMpEis5W0xNXJpPT1dXbFn7JTMyMzP6YQHmAAAAAOYBUykSSktF
        TExcTk9PT1BRJSUzMzIzM/pSAeYAAAAA5gFBKfRDVUVMRUZHT09JJT4zMzMzMjMz+1IB5gAAAADmAUFj
        EGQ4OTk6Ozw8PT4+MjIyMjIyMjI+QAHmAAAAAOUB/ykqHzlFLUYvPE8lJTMyMzMzMzIzM/tAAeUAAAAA
        5QH/DxxvZEUtLyEiI/slMzIzMzMzMjMl+jQB5QAAAADlARsN8/QQEfX29/j5F/slPiX6+iU+JfsX/gHl
        AAAAAOUB6Onq6+vr7O3u6AoK/v7+/v7+/v7+CgrvAeUAAAAA5QEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEB5QAAAADk5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP///////////////8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AA
        AAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AA
        AAPAAAADwAAAA8AAAAP/////
</value>
  </data>
</root>